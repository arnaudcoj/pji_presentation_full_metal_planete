Pourquoi :
- Tous les 2 passionnés de jeux vidéo
- On veut passer du côté de la création
- Pensé à créer un jeu vidéo de A à Z
- Projet Individuel qui nous a offert la possibilité
de choisir notre sujet
- Jeu de stratégie au tour par tour
- Julien nous a proposer d'adapter le jeu Full Métal Planète
- Concentrer sur le côté technique

Sommaire

Full Métal Planète
- Jeu de stratégie sorti en 1988 et édité par Ludodélire.
- Le jeu se déroule en 25 tours et le principe est de ramasser un maximum de minerai
- Évacuer la planète
- On peut se déplacer sur la carte en fonction des unités et des cases de terrain, transporter du minerai et des unités, attaquer et s'emparer d'unités ennemies.
- La carte changera de configuration en fonction des marées (basses, moyennes, hautes), qui changent à chaque tour.

Technologies :
- Le C++ 
- Langages les plus utilisés dans le domaine des jeux vidéo
- Occasion renforcer nos connaissances dans l'utilisation de ce langage
- L'utiliser dans le cadre de la création d'un jeu vidéo
- SFML, Simple and Fast Multimedia Library
- Permet de gérer et d'utiliser des ressources multimédia : images, le son etc...

Organisation : 
- Réunion avec Julien
- 2 parties
	-> API : données et logiques du jeu
	-> Interface : affichage du jeu
- Dans un premier temps nous avons travaillé sur 
- Au début : API tous les 2
- Arnaud -> API
- Tristan -> Interface
- Mise en place de nombreux test unitaires

Fonctionnalités

Classe principale :
- Classe Game : permet de récupérer une liste de joueurs et le joueur courant, le plateau, l'état de jeu, mais aussi d'agir sur ce dernier, en changeant le tour, les marées etc.

Plateau : 
- Premières étapes : représenter la grille de cases hexagonales
- Grille hexagonale -> une succession de lignes dans lesquelles on alterne le voisin bas droit et haut droit.
- Représenter par un tableau 2D
- Définir voisines d'une case donnée
- 2 cas : x pair = rouge, x impair = bleu
- Déduire formules.

- cases en bordure -> pas praticables - >demi-cases
- booléen

Tristan : Représentation graphique grille

Boucle de Jeu

Cases :
- Plateau composé que d'un type de case
- Le jeu en contient 5.
- Certaines cases changent d'état en fonction des marées
- Cases marais -> submérgées à marée haute
- Cases récifs -> asséchées à marée basse


Tristan : Représentation graphique type de case


Pions :
- 9 types d'unités
- Peuvent pratiquer différents types de cases
- Exemple : 
	vedettes & barge -> mer ou cases submergées
	tank & crabe -> terre ou cases assechées


Tristan : Représentation graphique pion


- Classe Piece & Components
- Component : définir le comportement d'une classe tout en découplant le code.
- 3 types de Components : 
	- moteurs
	- containers
	- armes
- brancher à une entité pour la spécialiser


Tours & Marées : 
- cases marées -> modifier le terrain en fonction du tour
- mises dans un tableau et mélangées, de façon à avoir un comportement aléatoire mais que l'on puisse prévoir les marées suivantes (grâce aux pondeuses météo)
- changement de tour -> marée suivante & mettre à jour le plateau
- 3 type de marées : Basse, moyenne et haute.


Gestion des ressources

Textures

Contôle à la souris


Déplacement : 
- Déplacer les pions d'une case à une autre, en fonction des obstacles rencontrés et des points d'actions restants

- fonction qui cherche les cases praticables avec un algorithme de remplissage par diffusion
- Pour chaque case on va vérifier si les voisins sont praticables.
- Si oui : ajoute dans la liste des cases accessibles
- On réitère en décrémentant le nombre de point d'actions
algorithme prend en compte : 
	- le nombre de points d'action disponibles
	- les demi-cases
	- les autres unités
	- le moteur de l'unité
	- le terrain

Tristan : Représentation graphique déplacement


Animation

Carte du jeu


PathFinding :
- Chercher le plus court chemin pour un déplacement
- Algorithme de Pathfinding appelé A Star ou A étoile

- A Star : utiliser une heuristique pour anticiper le chemin à prendre
- Se déplacer selon ce chemin
- Si obstacle : parcourir en largeur les cases autour

- efficacité et plus court chemin


Caméra


Conclusion :
- beaucoup appris
	- Technologies utilisées
	- pratiques développement de jeux vidéo.
- Gain d'expérience non négligeable pour travailler dans ce milieu
- savons que nous sommes capables de travailler sur un tel projet
- Moteur de jeu
- La prochaine fois on fait les règles du coup !
